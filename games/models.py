from django.db import models

# Create your models here.
import uuid
from datetime import timedelta
from django.db import models, transaction
from django.utils import timezone
from django.db.models import Q
from players.models import Player


class InteractionState(models.TextChoices):
    IDLE = 'idle', '–°–≤–æ–±–æ–¥–Ω–æ'
    PROCESSING_QUEUE = 'processing_queue', '–†–∞–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å'
    AWAITING_ANSWER = 'awaiting_answer', '–ñ–¥—ë–º –æ—Ç–≤–µ—Ç'

class QAStatus(models.TextChoices):
    NONE = 'none', '–ù–µ—Ç'
    QUEUED = 'queued', '–í –æ—á–µ—Ä–µ–¥–∏'
    CARD_SENT = 'card_sent', '–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
    ANSWERED = 'answered', '–û—Ç–≤–µ—á–µ–Ω–æ'

class Game(models.Model):
    class Status(models.TextChoices):
        ACTIVE = 'active', '–ê–∫—Ç–∏–≤–Ω–∞'
        PAUSED = 'paused', '–ü–∞—É–∑–∞'
        FINISHED = 'finished', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        INACTIVE = 'inactive', '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
        ABORTED = 'aborted', '–ü—Ä–µ—Ä–≤–∞–Ω–∞'
        IDLE = 'idle', '–°–≤–æ–±–æ–¥–Ω–æ'
        PROCESSING_QUEUE = 'processing_queue', '–†–∞–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å'
        AWAITING_ANSWER = 'awaiting_answer', '–ñ–¥—ë–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É'

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    player = models.ForeignKey(Player, on_delete=models.CASCADE, related_name='games', db_index=True)

    game_type = models.CharField('–¢–∏–ø –∏–≥—Ä—ã', max_length=100, blank=True)
    game_name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã', max_length=150, blank=True)

    status = models.CharField('–°—Ç–∞—Ç—É—Å', max_length=16, choices=Status.choices, default=Status.ACTIVE, db_index=True)
    is_active = models.BooleanField('–ê–∫—Ç—É–∞–ª—å–Ω–∞—è', default=True, db_index=True)

    current_cell = models.IntegerField('–¢–µ–∫—É—â–∞—è –∫–ª–µ—Ç–∫–∞', default=0)
    current_six_number = models.IntegerField('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∞–≤—à–∏—Ö —à–µ—Å—Ç–µ—Ä–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', default=0)
    last_move_number = models.IntegerField('‚Ññ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞', default=0)

    meta = models.JSONField('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', default=dict, blank=True)

    started_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    finished_at = models.DateTimeField(null=True, blank=True)
    expires_at = models.DateTimeField(null=True, blank=True)  # üëà —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    interaction_state = models.CharField(
        max_length=32,
        choices=InteractionState.choices,
        default=InteractionState.IDLE,
        db_index=True,
    )

    # —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∂–¥—ë–º –æ—Ç–≤–µ—Ç
    awaiting_answer_item = models.ForeignKey(
        'PendingQA',
        null=True, blank=True,
        on_delete=models.SET_NULL,
        related_name='games_waiting'
    )

    class Meta:
        ordering = ('-updated_at',)
        indexes = [
            models.Index(fields=['player', 'is_active', '-updated_at']),
            models.Index(fields=['player', 'status', '-updated_at']),
            models.Index(fields=['expires_at']),
        ]
        # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞
        constraints = [
            models.UniqueConstraint(
                fields=['player'],
                condition=Q(is_active=True),
                name='uniq_active_game_per_player'
            )
        ]

    def __str__(self):
        base = self.game_name or self.game_type or 'Game'
        return f'{base} | {self.player.email} | {self.status} | #{self.last_move_number}'

    # ---- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è ----
    @property
    def is_expired(self) -> bool:
        return bool(self.expires_at and timezone.now() >= self.expires_at)

    def expire_if_needed(self) -> bool:
        """–ï—Å–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ INACTIVE –∏ —Å–Ω–∏–º–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫–ª–∞."""
        if self.is_active and self.is_expired:
            self.status = self.Status.INACTIVE
            self.is_active = False
            self.finished_at = self.finished_at or timezone.now()
            self.save(update_fields=['status', 'is_active', 'finished_at', 'updated_at'])
            return True
        return False

    # ---- –§–∞–±—Ä–∏–∫–∏/–æ–ø–µ—Ä–∞—Ü–∏–∏ ----
    @classmethod
    def resume_last(cls, player, game_type: str = None, game_name: str = None):
        qs = cls.objects.filter(player=player, is_active=True, status__in=[cls.Status.ACTIVE, cls.Status.PAUSED])
        if game_type:
            qs = qs.filter(game_type=game_type)
        if game_name:
            qs = qs.filter(game_name=game_name)
        game = qs.order_by('-updated_at').first()
        if game:
            game.expire_if_needed()
            if not game.is_active:
                return None
        return game

    @classmethod
    def start_new(cls, player, game_type: str = '', game_name: str = '', meta: dict = None, ttl_days: int = 30):
        meta = meta or {}
        # –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ—á–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
        cls.objects.filter(player=player, is_active=True).update(is_active=False, status=cls.Status.INACTIVE)
        return cls.objects.create(
            player=player,
            game_type=game_type,
            game_name=game_name,
            meta=meta,
            status=cls.Status.ACTIVE,
            is_active=True,
            current_six_number=0,
            current_cell=0,
            last_move_number=0,
            expires_at=timezone.now() + timedelta(days=ttl_days),
        )

    @transaction.atomic
    def add_move(self, rolled: int, from_cell: int, to_cell: int,
                 event_type: str = 'normal', note: str = '', state_after: dict = None):
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        if self.expire_if_needed():
            raise ValueError("–ò–≥—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫.")
        state_after = state_after or {}
        next_num = self.last_move_number + 1
        Move.objects.create(
            game=self,
            move_number=next_num,
            rolled=rolled,
            from_cell=from_cell,
            to_cell=to_cell,
            event_type=event_type,
            note=note,
            state_snapshot=state_after,
        )
        self.last_move_number = next_num
        self.current_cell = to_cell
        self.save(update_fields=['last_move_number', 'current_cell', 'updated_at'])

    def pause(self):
        self.status = self.Status.PAUSED
        self.is_active = True
        self.save(update_fields=['status', 'is_active', 'updated_at'])

    def finish(self):
        self.status = self.Status.FINISHED
        self.is_active = False
        self.finished_at = timezone.now()
        self.save(update_fields=['status', 'is_active', 'finished_at', 'updated_at'])


class Move(models.Model):
    class EventType(models.TextChoices):
        NORMAL = 'normal', '–û–±—ã—á–Ω—ã–π —Ö–æ–¥'
        SNAKE = 'snake', '–ó–º–µ—è'
        LADDER = 'ladder', '–°—Ç—Ä–µ–ª–∞/–ª–µ—Å—Ç–Ω–∏—Ü–∞'
        BONUS = 'bonus', '–ë–æ–Ω—É—Å'
        PENALTY = 'penalty', '–®—Ç—Ä–∞—Ñ'
        NONE = 'none'
        QUEUED = 'queued'
        CARD_SENT = 'card_sent'
        ANSWERED = 'answered'

    id = models.BigAutoField(primary_key=True)
    game = models.ForeignKey(Game, on_delete=models.CASCADE, related_name='moves', db_index=True)
    move_number = models.PositiveIntegerField('‚Ññ —Ö–æ–¥–∞')
    on_hold = models.BooleanField('–û—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ 6', default=False)
    rolled = models.IntegerField(null=True, blank=True)
    from_cell = models.IntegerField('–° –∫–ª–µ—Ç–∫–∏', default=0)
    to_cell = models.IntegerField('–ù–∞ –∫–ª–µ—Ç–∫—É', default=0)
    event_type = models.CharField('–°–æ–±—ã—Ç–∏–µ', max_length=16, choices=EventType.choices, default=EventType.NORMAL)
    note = models.CharField(
        max_length=120, blank=True, null=True,
        verbose_name="–ó–∞–º–µ—Ç–∫–∞",
        help_text="–ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞ –∫ —Ö–æ–¥—É"
    )
    state_snapshot = models.JSONField('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞', default=dict, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    image_url = models.CharField(max_length=255, blank=True, default="")  # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –±–µ–∑ –¥–æ–º–µ–Ω–∞
    player_answer = models.TextField(
        null=True,
        blank=True,
        verbose_name="–û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞",
        help_text="–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ö–æ–¥–∞."
    )
    player_answer_at = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞",
        help_text="–ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–ª–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É."
    )
    answer_prompt_msg_id = models.BigIntegerField(
        null=True,
        blank=True,
        db_index=True,  # —É—Å–∫–æ—Ä–∏—Ç –ø–æ–∏—Å–∫ –ø–æ reply_to_message_id
        verbose_name="ID —Å–æ–æ–±—â–µ–Ω–∏—è-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–∞",
        help_text="message_id ForceReply-—Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å."
    )

    # –°—ã—Ä–æ–π –≤–µ–±—Ö—É–∫ (–≤–µ—Å—å JSON –∫–∞–∫ –µ—Å—Ç—å)
    webhook_payload = models.JSONField('Webhook payload', default=dict, blank=True)

    # Telegram meta
    tg_from_id = models.BigIntegerField('Telegram From ID', null=True, blank=True, db_index=True)
    tg_message_date = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (UTC)', null=True, blank=True, db_index=True)
    qa_status = models.CharField(max_length=16, choices=QAStatus.choices, default=QAStatus.NONE, db_index=True)
    qa_sequence_in_combo = models.PositiveIntegerField(default=0, db_index=True)  # –ø–æ—Ä—è–¥–æ–∫ –≤ —Å–µ—Ä–∏–∏
    qa_combo_id = models.UUIDField(null=True, blank=True, db_index=True)

    class Meta:
        ordering = ('move_number',)
        unique_together = (('game', 'move_number'),)
        indexes = [
            models.Index(fields=['game', 'move_number']),
            models.Index(fields=['-created_at']),
            models.Index(fields=['tg_from_id']),  # üëà –±—ã—Å—Ç—Ä–æ –∏—Å–∫–∞—Ç—å –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            models.Index(fields=['tg_message_date']),  # üëà –±—ã—Å—Ç—Ä–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ
        ]

    def __str__(self):
        return f'#{self.move_number} {self.event_type} {self.from_cell}->{self.to_cell}'

    class PendingQA(models.Model):
        class Status(models.TextChoices):
            QUEUED = 'queued', '–í –æ—á–µ—Ä–µ–¥–∏'
            CARD_SENT = 'card_sent', '–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
            ANSWERED = 'answered', '–û—Ç–≤–µ—á–µ–Ω–æ'

        game = models.ForeignKey(Game, on_delete=models.CASCADE, related_name='pending_qas', db_index=True)
        move = models.ForeignKey('Move', on_delete=models.CASCADE, related_name='qa_items')
        order_index = models.PositiveIntegerField(db_index=True)  # –ø–æ—Ä—è–¥–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
        status = models.CharField(max_length=16, choices=Status.choices, default=Status.QUEUED, db_index=True)

        # —á—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–ª–∏/–∂–¥—ë–º
        card_text = models.TextField(blank=True, default='')
        question_text = models.TextField(blank=True, default='')

        # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer_text = models.TextField(blank=True, default='')

        created_at = models.DateTimeField(auto_now_add=True, db_index=True)
