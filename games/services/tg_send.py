from __future__ import annotations

from typing import Dict, Any, List, Optional
from django.conf import settings
from games.services.board import get_cell
import os
from typing import Any, Dict, Optional
import time
import requests

SITE_BASE_URL = getattr(settings, "SITE_BASE_URL", "").rstrip("/")

# –ì–¥–µ –ª–µ–∂–∞—Ç —Ñ–∞–π–ª—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞—á–Ω—É—Ç—Å—è —Å "cards/...")
MEDIA_ROOT = getattr(settings, "PROTECTED_MEDIA_ROOT", "")
TG_API = "https://api.telegram.org/bot{token}/{method}"
DEFAULT_TIMEOUT = 10
# –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è sendDice:
ALLOWED_DICE_EMOJIS = {"üé≤", "üéØ", "üèÄ", "‚öΩ", "üé≥", "üé∞"}


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------

def _abs_path_from_rel(rel_path: Optional[str]) -> Optional[str]:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ MEDIA_ROOT –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä., 'cards/22-....jpg')."""
    if not rel_path or not MEDIA_ROOT:
        return None
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    rel_norm = rel_path.lstrip("/").replace("/", os.sep)
    return os.path.join(MEDIA_ROOT, rel_norm)


def _is_good_image_url(url: str, timeout: float = 8.0) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–µ–∂–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞, –∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è."""
    try:
        r = requests.head(url, allow_redirects=True, timeout=timeout)
        if r.status_code != 200:
            return False
        ct = (r.headers.get("Content-Type") or "").lower()
        cl = int(r.headers.get("Content-Length") or 0)
        return ct.startswith("image/") and cl > 0
    except Exception:
        return False


def _truncate_caption(caption: Optional[str]) -> Optional[str]:
    """–ü–æ–¥—Ä–µ–∑–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ –ª–∏–º–∏—Ç Telegram ~1024 —Å–∏–º–≤–æ–ª–∞."""
    if caption and len(caption) > 1024:
        return caption[:1021] + "..."
    return caption


# ---------- –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Ö–æ–¥–∞ ----------

def render_move_text(mv: Dict[str, Any]) -> str:
    """
    –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É —Ö–æ–¥—É.
    –û–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è board.json: title/name, meaning/text/desc.
    """
    to_cell = int(mv.get("to_cell") or 0)
    from_cell = int(mv.get("from_cell") or 0)
    rolled = mv.get("rolled")
    cell = get_cell(to_cell) or {}

    title = cell.get("title") or cell.get("name") or f"–ö–ª–µ—Ç–∫–∞ {to_cell}"
    meaning = cell.get("meaning") or cell.get("text") or cell.get("desc") or ""
    rules = mv.get("applied_rules") or []
    if rules:
        chain = "\n".join([f"‚Üí {r.get('from')} ‚Üí {r.get('to')}" for r in rules])
        rules_block = f"\n–ü–µ—Ä–µ—Ö–æ–¥—ã:\n{chain}"
    else:
        rules_block = ""

    return (
        f"–ë—Ä–æ—Å–æ–∫: {rolled}\n"
        f"{from_cell} ‚Üí {to_cell}\n"
        f"{title}\n"
        f"{meaning}{rules_block}"
    ).strip()


# ---------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------

def send_moves_sequentially(
        bot_token: str,
        chat_id: int,
        moves: List[Dict[str, Any]],
        per_message_delay: float = 3.6,
) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ö–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏.
    –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞:
      1) –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ URL (photo=<URL>) ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–¥–∞–µ—Ç image/* –∏ –Ω–µ –ø—É—Å—Ç–æ–π;
      2) –µ—Å–ª–∏ URL –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ TG –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª (multipart) –∏–∑ MEDIA_ROOT;
    –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç.
    """
    sent = 0
    base = f"https://api.telegram.org/bot{bot_token}"

    for mv in moves:

        caption = _truncate_caption(render_move_text(mv))

        rel_img = mv.get("image_url") or mv.get("image")
        abs_path = _abs_path_from_rel(rel_img) if rel_img else None

        time.sleep(5.0)
        # ... –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ –ø–æ —Ö–æ–¥–∞–º ...
        try:
            # --- 2) –§–æ–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ —Ñ–∞–π–ª–∞ (–∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ MEDIA_ROOT) ---
            if abs_path:
                with open(abs_path, "rb") as f:
                    r = requests.post(
                        f"{base}/sendPhoto",
                        data={"chat_id": chat_id, "caption": ''},
                        files={"photo": f},
                        timeout=5
                    )
                if r.status_code == 200:
                    sent += 1
                    continue  # –ø–∞—É–∑–∞ –±—É–¥–µ—Ç –≤ finally

            # --- 3) –ù–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –≤—Å—ë —É–ø–∞–ª–æ ‚Äî —à–ª—ë–º —Ç–µ–∫—Å—Ç ---
            r = requests.post(
                f"{base}/sendMessage",
                json={"chat_id": chat_id, "text": caption or ""},
                timeout=8,
            )
            if r.status_code == 200:
                sent += 1

        except Exception:
            # –õ—é–±–∞—è –æ—à–∏–±–∫–∞ ‚Äî —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
            try:
                r = requests.post(
                    f"{base}/sendMessage",
                    json={"chat_id": chat_id, "text": caption or ""},
                    timeout=8,
                )
                if r.status_code == 200:
                    sent += 1
            except Exception:
                # —Å–æ–≤—Å–µ–º —É–ø–∞–ª–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                pass

    return sent


def send_dice(
        token: Optional[str],
        chat_id: int | str,
        *,
        emoji: str = "üé≤",
        disable_notification: bool = False,
        reply_to_message_id: Optional[int] = None,
        allow_sending_without_reply: bool = True,
        message_thread_id: Optional[int] = None,  # –¥–ª—è —Ç–µ–º –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
        timeout: int = DEFAULT_TIMEOUT,
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –≤ —á–∞—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-–æ—Ç–≤–µ—Ç Telegram (dict).
    –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä—ë—Ç TELEGRAM_BOT_TOKEN –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    token = token or os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        return {"ok": False, "error": "bot_token_not_set"}

    if emoji not in ALLOWED_DICE_EMOJIS:
        emoji = "üé≤"

    payload: Dict[str, Any] = {
        "chat_id": chat_id,
        "emoji": emoji,
        "disable_notification": disable_notification,
        "allow_sending_without_reply": allow_sending_without_reply,
    }
    if reply_to_message_id is not None:
        payload["reply_to_message_id"] = reply_to_message_id
    if message_thread_id is not None:
        payload["message_thread_id"] = message_thread_id

    try:
        r = requests.post(
            TG_API.format(token=token, method="sendDice"),
            json=payload,
            timeout=timeout,
        )
        # –ë—ã–≤–∞–µ—Ç, —á—Ç–æ Telegram –≤–µ—Ä–Ω—ë—Ç HTML –≤ –æ—à–∏–±–∫–∞—Ö ‚Äî –∑–∞—â–∏—Ç–∏–º—Å—è
        try:
            data = r.json()
        except Exception:
            return {"ok": False, "status_code": r.status_code, "text": r.text}
        return data
    except requests.RequestException as e:
        return {"ok": False, "error": "request_exception", "detail": str(e)}


def extract_dice_value(resp: Dict[str, Any]) -> Optional[int]:
    """–£–¥–æ–±–Ω—ã–π —Ö–µ–ª–ø–µ—Ä: –¥–æ—Å—Ç–∞—ë—Ç –≤—ã–ø–∞–≤—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1..6 –∏–∑ –æ—Ç–≤–µ—Ç–∞ sendDice."""
    try:
        return (resp.get("result") or {}).get("dice", {}).get("value")
    except Exception:
        return None

def send_quiz(
    token: Optional[str],
    chat_id: int | str,
    *,
    prompt_text: str,
    timeout: int = DEFAULT_TIMEOUT,
) -> Dict[str, Any]:
    """
    –ü—Ä–æ—Å–∏–º –∏–≥—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ForceReply.
    –ò–≥—Ä–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä—è–º–æ –≤ —á–∞—Ç, –∏—Ö next-message –ø—Ä–∏–¥—ë—Ç –∫–∞–∫ reply_to_message.
    """
    token = token or os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        return {"ok": False, "error": "bot_token_not_set"}

    payload = {
        "chat_id": chat_id,
        "text": prompt_text,
        "reply_markup": {"force_reply": True, "input_field_placeholder": "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç‚Ä¶"},
    }
    try:
        r = requests.post(TG_API.format(token=token, method="sendMessage"), json=payload, timeout=timeout)
        try:
            return r.json()
        except Exception:
            return {"ok": False, "status_code": r.status_code, "text": r.text}
    except requests.RequestException as e:
        return {"ok": False, "error": "request_exception", "detail": str(e)}