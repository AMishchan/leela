import json
from datetime import datetime, timezone as dt_tz
from pathlib import Path
from threading import Thread
from games.services.tg_send import send_moves_sequentially
from django.http import JsonResponse, HttpResponseNotAllowed
from django.views.decorators.csrf import csrf_exempt
from games.models import Game, Move
from players.models import Player
from games.services.entry import GameEntryManager
from games.services.tg_send import send_dice  # –∏–º–ø–æ—Ä—Ç


from django.conf import settings

# Where to dump webhook payloads
DUMP_DIR = Path(getattr(settings, "WEBHOOK_DUMP_DIR",
                        Path(settings.BASE_DIR) / "var" / "webhooks"))
DUMP_DIR.mkdir(parents=True, exist_ok=True)


def _extract_telegram_meta(payload: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
      {
        "update_id": int|None,
        "from_id": int|None,
        "username": str|None,
        "message_date": datetime|None (UTC),
        "dice_value": int|None,
        "message_id": int|None,
      }
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é {data: {message: ...}}, —Ç–∞–∫ –∏ —Å –ø–ª–æ—Å–∫–∏–º {message: ...}.
    """
    d = payload.get("data") if isinstance(payload, dict) else None
    root = payload
    if isinstance(d, dict) and "message" in d:
        root = d

    message = (root or {}).get("message") or {}
    frm = message.get("from") or {}

    ts = message.get("date")
    msg_dt = None
    if isinstance(ts, (int, float)):
        msg_dt = datetime.fromtimestamp(ts, tz=dt_tz.utc)

    dice_value = None
    dice = message.get("dice")
    if isinstance(dice, dict):
        dice_value = dice.get("value")

    message = (root or {}).get("message") or {}

    chat = message.get("chat") or {}
    chat_id = chat.get("id")  # NEW

    frm = message.get("from") or {}
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    return {
        "update_id": payload.get("update_id"),
        "from_id": frm.get("id"),
        "username": frm.get("username"),
        "message_date": msg_dt,
        "dice_value": dice_value,
        "message_id": message.get("message_id"),
        "chat_id": chat_id,  # NEW
    }


@csrf_exempt
def telegram_dice_webhook(request):
    if request.method != "POST":
        return HttpResponseNotAllowed(["POST"])

    raw_body = request.body or b""
    try:
        payload = json.loads(raw_body.decode("utf-8"))
    except Exception:
        payload = {"_parse_error": True}

    meta = _extract_telegram_meta(payload)
    tg_from_id = meta["from_id"]
    tg_username = meta["username"]
    tg_dt = meta["message_date"]
    dice_value = meta["dice_value"]
    update_id = meta["update_id"]
    chat_id = meta.get("chat_id") or tg_from_id  # NEW: –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ chat_id

    # --- –ù–∞—Ö–æ–¥–∏–º/—Å–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–∞ ---
    player = _upsert_player_from_telegram(tg_from_id, tg_username)

    # --- –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É ---
    game = Game.resume_last(player=player)  # –≤–∞–∂–Ω–æ: —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ë–†–ê–¢–¨ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã

    bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)

    # NEW: –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –Ω–µ—Ç (–∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∏–≥—Ä) ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—É—é –∏ –°–†–ê–ó–£ –∫–∏–¥–∞–µ–º DICE
    if not game:
        game = Game.start_new(player=player, game_type="telegram_dice", game_name="–õ–∏–ª–∞ (TG)")
        if bot_token:
            Thread(target=send_dice, args=(bot_token, chat_id),
                   kwargs={"emoji": "üé≤"}, daemon=True).start()
        return JsonResponse({
            "ok": True,
            "status": "new_game_started",
            "message": "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞. –ë—Ä–æ—Å–∞–µ–º –ø–µ—Ä–≤—ã–π –∫—É–±–∏–∫.",
            "game_id": str(game.id),
            "dice_sent": bool(bot_token),
        })

    # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∞–ø–¥–µ–π—Ç –ë–ï–ó –∫—É–±–∏–∫–∞ ‚Äî –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏—ë–º
    if dice_value is None:
        return JsonResponse({"ok": True, "captured": True, "dice_value": None})

    # --- –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ ‚Äî –∏–≥—Ä–∞–µ–º —Ö–æ–¥ ---
    manager = GameEntryManager()
    res = manager.apply_roll(game, rolled=int(dice_value), player_id=player.id)

    # –°–µ—Ä–∏—è —à–µ—Å—Ç–µ—Ä–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ‚Äî –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç, —Å—Ä–∞–∑—É –∫–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—É–±–∏–∫
    if res.status == "continue":
        if bot_token:
            Thread(target=send_dice, args=(bot_token, chat_id),
                   kwargs={"emoji": "üé≤"}, daemon=True).start()
        return JsonResponse({
            "ok": True,
            "status": "continue",
            "message": res.message,
            "six_count": res.six_count,
            "dice_sent": bool(bot_token),
        })

    # –°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ö–æ–¥—ã, –∑–∞—Ç–µ–º –Ω–æ–≤—ã–π –∫—É–±–∏–∫
    if res.status == "completed":
        if bot_token and res.moves:
            Thread(
                target=_send_moves_then_dice,
                args=(bot_token, chat_id, res.moves),
                kwargs={"per_message_delay": 0.6, "emoji": "üé≤"},
                daemon=True,
            ).start()
        return JsonResponse({
            "ok": True,
            "status": "completed",
            "message": "–°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            "moves_count": len(res.moves),
            "dice_scheduled": bool(bot_token and res.moves),
        })

    # –û–±—ã—á–Ω—ã–π –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ö–æ–¥ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É, –∑–∞—Ç–µ–º –Ω–æ–≤—ã–π –∫—É–±–∏–∫
    if res.status == "single":
        if bot_token and res.moves:
            Thread(
                target=_send_moves_then_dice,
                args=(bot_token, chat_id, res.moves),
                kwargs={"per_message_delay": 0.0, "emoji": "üé≤"},
                daemon=True,
            ).start()
        return JsonResponse({
            "ok": True,
            "status": "single",
            "message": res.message,
            "moves_count": len(res.moves),
            "dice_scheduled": bool(bot_token and res.moves),
        })

    # –ï—Å–ª–∏ –∏–≥–Ω–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä—Ç –±–µ–∑ —à–µ—Å—Ç–µ—Ä–∫–∏) ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–∏–Ω–µ–º –Ω–æ–≤—ã–π –∫—É–±–∏–∫, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–≤–∏—Å–∞–ª–æ
    if res.status == "ignored":
        if bot_token:
            Thread(target=send_dice, args=(bot_token, chat_id),
                   kwargs={"emoji": "üé≤"}, daemon=True).start()
        return JsonResponse({
            "ok": True,
            "status": "ignored",
            "message": res.message,
            "six_count": res.six_count,
            "dice_sent": bool(bot_token),
        })

    # finished –∏ –ø—Ä–æ—á–∏–µ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ-–∫—É–±–∏–∫–∞
    return JsonResponse({
        "ok": True,
        "status": res.status,
        "message": res.message,
        "six_count": res.six_count,
    })



# helpers –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞ (–∏–ª–∏ –≤—ã–Ω–µ—Å–∏ –≤ helpers/player_lookup.py)
from django.db import transaction


def _player_defaults_from_meta(tg_id: int | None, tg_username: str | None) -> dict:
    """–°–æ–±–∏—Ä–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ defaults –¥–ª—è Player.get_or_create."""
    email_local = str(tg_id or tg_username or "unknown")
    defaults = {
        "email": f"tg_{email_local}@example.local",
        "telegram_username": (tg_username or "").strip(),
    }
    # –ï—Å–ª–∏ –≤ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å choice-–ø–æ–ª—è ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
    try:
        if hasattr(Player, "MainStatus"):
            defaults["main_status"] = Player.MainStatus.ACTIVE
        if hasattr(Player, "PlayerType"):
            defaults["player_type"] = Player.PlayerType.FREE
        if hasattr(Player, "PaymentsStatus"):
            defaults["payment_status"] = Player.PaymentsStatus.NONE
    except Exception:
        pass
    return defaults


def _upsert_player_from_telegram(tg_id: int | None, tg_username: str | None) -> Player:
    """–ù–∞—Ö–æ–¥–∏—Ç/—Å–æ–∑–¥–∞—ë—Ç Player –ø–æ telegram_id –∏–ª–∏ telegram_username, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç username."""
    defaults = _player_defaults_from_meta(tg_id, tg_username)
    with transaction.atomic():
        # 1) –ø—Ä–æ–±—É–µ–º –ø–æ telegram_id
        if tg_id:
            player, created = Player.objects.get_or_create(
                telegram_id=tg_id,
                defaults=defaults,
            )
            # –æ–±–Ω–æ–≤–∏–º username, –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è–ª—Å—è
            new_un = (tg_username or "").strip()
            if not created and new_un and player.telegram_username != new_un:
                player.telegram_username = new_un
                # –µ—Å–ª–∏ –µ—Å—Ç—å updated_at ‚Äî –æ–Ω —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—Å—è auto_now=True; –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–º —ç—Ç–æ –ø–æ–ª–µ
                player.save(update_fields=["telegram_username"])
            return player

        # 2) –∏–Ω–∞—á–µ ‚Äî –ø–æ username (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        if tg_username:
            player, _ = Player.objects.get_or_create(
                telegram_username__iexact=tg_username.strip(),
                defaults=defaults,
            )
            return player

        # 3) –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–∏ id, –Ω–∏ username (—Ç–µ—Ö–Ω–∏—á. –∑–∞–ø–∏—Å—å)
        return Player.objects.create(**defaults)


def _send_moves_then_dice(bot_token: str, chat_id: int | str,
                          moves: list[dict], *, per_message_delay: float = 0.6,
                          emoji: str = "üé≤"):
    try:
        send_moves_sequentially(bot_token, chat_id, moves, per_message_delay=per_message_delay)
    finally:
        try:
            send_dice(bot_token, chat_id, emoji=emoji)
        except Exception:
            pass
