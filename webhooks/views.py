import json
from datetime import datetime, timezone as dt_tz
from pathlib import Path
from threading import Thread
from games.services.tg_send import send_moves_sequentially
from players.models import Player
from games.services.entry import GameEntryManager
from games.services.tg_send import send_dice  # –∏–º–ø–æ—Ä—Ç
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse, HttpResponseNotAllowed
from games.models import Move, Game
from games.services.tg_send import send_quiz
from django.utils import timezone
from django.conf import settings
from django.db import transaction
from games.services.board import get_cell_image_name
from games.services.images import image_url_from_board_name

# Where to dump webhook payloads
DUMP_DIR = Path(getattr(settings, "WEBHOOK_DUMP_DIR",
                        Path(settings.BASE_DIR) / "var" / "webhooks"))
DUMP_DIR.mkdir(parents=True, exist_ok=True)

def _send_one_move_and_quiz(bot_token: str, chat_id: int | str, move_dict: dict, *, delay: float = 0.6):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –û–î–ù–£ –∫–∞—Ä—Ç–æ—á–∫—É —Ö–æ–¥–∞, –∑–∞—Ç–µ–º ForceReply –ø–æ —ç—Ç–æ–º—É –∂–µ —Ö–æ–¥—É,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç answer_prompt_msg_id –≤ Move.
    """
    try:
        # 1) –∫–∞—Ä—Ç–æ—á–∫–∞
        send_moves_sequentially(bot_token, chat_id, [move_dict], per_message_delay=delay)
    finally:
        # 2) –∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ (ForceReply)
        try:
            move_id = move_dict.get("id")
            to_cell = move_dict.get("to_cell")
            rolled = move_dict.get("rolled")
            prompt = f"–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ —Ö–æ–¥—É #{move_dict.get('move_number')} (–±—Ä–æ—Å–æ–∫ {rolled}, –∫–ª–µ—Ç–∫–∞ {to_cell}). –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏/–ø–æ–Ω—è–ª–∏."

            resp = send_quiz(bot_token, chat_id, prompt_text=prompt)
            msg_id = (resp.get("result") or {}).get("message_id")
            if msg_id and move_id:
                mv = Move.objects.filter(id=move_id).first()
                if mv:
                    mv.answer_prompt_msg_id = int(msg_id)
                    mv.save(update_fields=["answer_prompt_msg_id"])
        except Exception:
            pass

def _send_moves_then_quiz(bot_token: str, chat_id: int | str, moves: list[dict], *, per_message_delay: float = 0.6):
    """
    1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ö–æ–¥–æ–≤.
    2) –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –ø—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç (ForceReply).
    3) –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –∑–∞–ø—Ä–æ—Å–∞ –≤ Move.answer_prompt_msg_id.
    """
    try:
        send_moves_sequentially(bot_token, chat_id, moves, per_message_delay=per_message_delay)
    finally:
        try:
            if not moves:
                return
            last = moves[-1]
            move_id = last.get("id")
            # —Ç–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞ –º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∫–ª–µ—Ç–∫–∏/—Å–æ–±—ã—Ç–∏—è
            to_cell = last.get("to_cell")
            rolled = last.get("rolled")
            prompt = f"–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ —Ö–æ–¥—É #{last.get('move_number')} (–±—Ä–æ—Å–æ–∫ {rolled}, –∫–ª–µ—Ç–∫–∞ {to_cell}). –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏/–ø–æ–Ω—è–ª–∏."

            resp = send_quiz(bot_token, chat_id, prompt_text=prompt)
            msg_id = (resp.get("result") or {}).get("message_id")
            if msg_id and move_id:
                from games.models import Move
                try:
                    mv = Move.objects.get(id=move_id)
                    mv.answer_prompt_msg_id = int(msg_id)
                    mv.save(update_fields=["answer_prompt_msg_id"])
                except Exception:
                    pass
        except Exception:
            pass

def _extract_telegram_meta(payload: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
      {
        "update_id": int|None,
        "from_id": int|None,
        "username": str|None,
        "message_date": datetime|None (UTC),
        "dice_value": int|None,
        "message_id": int|None,
      }
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é {data: {message: ...}}, —Ç–∞–∫ –∏ —Å –ø–ª–æ—Å–∫–∏–º {message: ...}.
    """
    d = payload.get("data") if isinstance(payload, dict) else None
    root = payload
    if isinstance(d, dict) and "message" in d:
        root = d

    message = (root or {}).get("message") or {}
    frm = message.get("from") or {}

    ts = message.get("date")
    msg_dt = None
    if isinstance(ts, (int, float)):
        msg_dt = datetime.fromtimestamp(ts, tz=dt_tz.utc)

    dice_value = None
    dice = message.get("dice")
    if isinstance(dice, dict):
        dice_value = dice.get("value")

    message = (root or {}).get("message") or {}

    chat = message.get("chat") or {}
    chat_id = chat.get("id")  # NEW

    frm = message.get("from") or {}
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    return {
        "update_id": payload.get("update_id"),
        "from_id": frm.get("id"),
        "username": frm.get("username"),
        "message_date": msg_dt,
        "dice_value": dice_value,
        "message_id": message.get("message_id"),
        "chat_id": chat_id,  # NEW
    }


@csrf_exempt
def telegram_dice_webhook(request):
    if request.method != "POST":
        return HttpResponseNotAllowed(["POST"])

    raw_body = request.body or b""
    try:
        payload = json.loads(raw_body.decode("utf-8"))
    except Exception:
        payload = {"_parse_error": True}

    meta = _extract_telegram_meta(payload)
    tg_from_id = meta["from_id"]
    tg_username = meta["username"]
    tg_dt = meta["message_date"]
    dice_value = meta["dice_value"]
    update_id = meta["update_id"]

    # --- –ù–∞—Ö–æ–¥–∏–º/—Å–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–∞ ---
    player = _upsert_player_from_telegram(tg_from_id, tg_username)

    # --- –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ dice_value ---
    game = Game.resume_last(player=player)

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∏ –∫–∏–¥–∞–µ–º –ü–ï–†–í–´–ô –∫—É–±–∏–∫ –æ—Ç –±–æ—Ç–∞
    if not game:
        game = Game.start_new(player=player, game_type="telegram_dice", game_name="–õ–∏–ª–∞ (TG)")
        bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
        if bot_token:
            Thread(
                target=send_dice,   # –∏–º–ø–æ—Ä—Ç –∏–∑ games.services.send
                args=(bot_token, tg_from_id),
                kwargs={"emoji": "üé≤"},
                daemon=True,
            ).start()
        return JsonResponse({
            "ok": True,
            "status": "new_game_started",
            "message": "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞. –ë—Ä–æ—Å–∞–µ–º –ø–µ—Ä–≤—ã–π –∫—É–±–∏–∫.",
            "game_id": str(game.id),
            "dice_sent": bool(bot_token),
        })

    # --- –ï–°–õ–ò –≠–¢–û –ù–ï –ö–£–ë–ò–ö: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∂–¥—ë–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ —Ö–æ–¥—É ---
    if dice_value is None:
        bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
        pending = Move.objects.filter(
            game=game, on_hold=False, player_answer__isnull=True
        ).order_by("move_number").first()  # –í–ê–ñ–ù–û: —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ö–æ–¥

        if pending:
            # –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ä–º—É (ForceReply), –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if bot_token and not pending.answer_prompt_msg_id:
                prompt = (f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –ø–æ —Ö–æ–¥—É #{pending.move_number} "
                          f"(–∫–ª–µ—Ç–∫–∞ {pending.to_cell}). –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏/–ø–æ–Ω—è–ª–∏.")
                resp = send_quiz(bot_token, tg_from_id, prompt_text=prompt)
                msg_id = (resp.get("result") or {}).get("message_id")
                if msg_id:
                    pending.answer_prompt_msg_id = int(msg_id)
                    pending.save(update_fields=["answer_prompt_msg_id"])

            return JsonResponse({
                "ok": True,
                "status": "awaiting_answer",
                "message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±—Ä–æ—Å–∫–æ–º.",
                "pending_move_id": pending.id,
            })

        # –ù–∏—á–µ–≥–æ –Ω–µ –∂–¥—ë–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏—ë–º –Ω–µ-–∫—É–±–∏–∫–∞
        return JsonResponse({"ok": True, "captured": True, "dice_value": None})

    # --- –ü–†–ò–®–Å–õ –ö–£–ë–ò–ö: –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ö–æ–¥–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ---
    bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
    pending = Move.objects.filter(
        game=game, on_hold=False, player_answer__isnull=True
    ).order_by("move_number").first()  # –í–ê–ñ–ù–û: —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π

    if pending:
        if bot_token and not pending.answer_prompt_msg_id:
            prompt = (f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –ø–æ —Ö–æ–¥—É #{pending.move_number} "
                      f"(–∫–ª–µ—Ç–∫–∞ {pending.to_cell}). –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏/–ø–æ–Ω—è–ª–∏.")
            resp = send_quiz(bot_token, tg_from_id, prompt_text=prompt)
            msg_id = (resp.get("result") or {}).get("message_id")
            if msg_id:
                pending.answer_prompt_msg_id = int(msg_id)
                pending.save(update_fields=["answer_prompt_msg_id"])

        return JsonResponse({
            "ok": True,
            "status": "awaiting_answer",
            "message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±—Ä–æ—Å–∫–æ–º.",
            "pending_move_id": pending.id,
        })

    # --- –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –∏ –ø—Ä–∏—à—ë–ª –∫—É–±–∏–∫ ‚Äî –∏–≥—Ä–∞–µ–º —Ö–æ–¥ ---
    manager = GameEntryManager()
    res = manager.apply_roll(game, rolled=int(dice_value), player_id=player.id)

    if res.status == "continue":
        # –ù–ï —à–ª—ë–º sendDice –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        return JsonResponse({
            "ok": True,
            "status": "continue",
            "message": res.message,
            "six_count": res.six_count,
        })

    if res.status == "completed":
        # –í–ù–ò–ú–ê–ù–ò–ï: –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–µ—Ä–∏–∏ –ü–û –û–î–ù–û–ô + ForceReply –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π ‚Äî
        # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏–º _send_one_move_and_quiz(...)
        if bot_token and res.moves:
            Thread(
                target=_send_moves_then_quiz,   # –µ—Å–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ–º–∏–Ω—É—Ç–Ω–æ ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–∞–∫;
                args=(bot_token, tg_from_id, res.moves),
                kwargs={"per_message_delay": 0.6},
                daemon=True,
            ).start()
        return JsonResponse({
            "ok": True,
            "status": "completed",
            "message": "–°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            "six_count": res.six_count,
            "moves_count": len(res.moves),
        })

    if res.status == "single":
        if bot_token and res.moves:
            Thread(
                target=_send_moves_then_quiz,
                args=(bot_token, tg_from_id, res.moves),
                kwargs={"per_message_delay": 0.6},
                daemon=True,
            ).start()
        return JsonResponse({
            "ok": True,
            "status": "single",
            "message": res.message,
            "moves_count": len(res.moves),
        })

    if res.status == "ignored":
        return JsonResponse({
            "ok": True,
            "status": "ignored",
            "message": res.message,
            "six_count": res.six_count,
        })

    # finished –∏ –ø—Ä–æ—á–∏–µ ‚Äî –±–µ–∑ –¥–æ–ø. –¥–µ–π—Å—Ç–≤–∏–π
    return JsonResponse({
        "ok": True,
        "status": res.status,
        "message": res.message,
        "six_count": res.six_count,
    })


def _player_defaults_from_meta(tg_id: int | None, tg_username: str | None) -> dict:
    """–°–æ–±–∏—Ä–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ defaults –¥–ª—è Player.get_or_create."""
    email_local = str(tg_id or tg_username or "unknown")
    defaults = {
        "email": f"tg_{email_local}@example.local",
        "telegram_username": (tg_username or "").strip(),
    }
    # –ï—Å–ª–∏ –≤ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å choice-–ø–æ–ª—è ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
    try:
        if hasattr(Player, "MainStatus"):
            defaults["main_status"] = Player.MainStatus.ACTIVE
        if hasattr(Player, "PlayerType"):
            defaults["player_type"] = Player.PlayerType.FREE
        if hasattr(Player, "PaymentsStatus"):
            defaults["payment_status"] = Player.PaymentsStatus.NONE
    except Exception:
        pass
    return defaults


def _upsert_player_from_telegram(tg_id: int | None, tg_username: str | None) -> Player:
    """–ù–∞—Ö–æ–¥–∏—Ç/—Å–æ–∑–¥–∞—ë—Ç Player –ø–æ telegram_id –∏–ª–∏ telegram_username, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç username."""
    defaults = _player_defaults_from_meta(tg_id, tg_username)
    with transaction.atomic():
        # 1) –ø—Ä–æ–±—É–µ–º –ø–æ telegram_id
        if tg_id:
            player, created = Player.objects.get_or_create(
                telegram_id=tg_id,
                defaults=defaults,
            )
            # –æ–±–Ω–æ–≤–∏–º username, –µ—Å–ª–∏ –ø–æ–º–µ–Ω—è–ª—Å—è
            new_un = (tg_username or "").strip()
            if not created and new_un and player.telegram_username != new_un:
                player.telegram_username = new_un
                # –µ—Å–ª–∏ –µ—Å—Ç—å updated_at ‚Äî –æ–Ω —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—Å—è auto_now=True; –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–º —ç—Ç–æ –ø–æ–ª–µ
                player.save(update_fields=["telegram_username"])
            return player

        # 2) –∏–Ω–∞—á–µ ‚Äî –ø–æ username (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        if tg_username:
            player, _ = Player.objects.get_or_create(
                telegram_username__iexact=tg_username.strip(),
                defaults=defaults,
            )
            return player

        # 3) –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–∏ id, –Ω–∏ username (—Ç–µ—Ö–Ω–∏—á. –∑–∞–ø–∏—Å—å)
        return Player.objects.create(**defaults)


def _send_moves_then_dice(bot_token: str, chat_id: int | str,
                          moves: list[dict], *, per_message_delay: float = 0.6,
                          emoji: str = "üé≤"):
    try:
        send_moves_sequentially(bot_token, chat_id, moves, per_message_delay=per_message_delay)
    finally:
        try:
            send_dice(bot_token, chat_id, emoji=emoji)
        except Exception:
            pass

def _extract_text_reply(payload: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {chat_id, from_id, text, reply_to_message_id} –∏–ª–∏ None.
    """
    msg = (payload.get("message") or
           (payload.get("data") or {}).get("message") or
           {})
    text = msg.get("text")
    if not isinstance(text, str):
        return None
    reply = msg.get("reply_to_message") or {}
    return {
        "chat_id": (msg.get("chat") or {}).get("id"),
        "from_id": (msg.get("from") or {}).get("id"),
        "text": text.strip(),
        "reply_to_message_id": reply.get("message_id"),
    }

@csrf_exempt
def telegram_answer_webhook(request):
    if request.method != "POST":
        return HttpResponseNotAllowed(["POST"])

    try:
        payload = json.loads((request.body or b"").decode("utf-8"))
    except Exception:
        return JsonResponse({"ok": False, "error": "bad_json"}, status=400)

    data = _extract_text_reply(payload)
    if not data or not data.get("reply_to_message_id"):
        # —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ ForceReply ‚Äî –º–æ–∂–µ—Ç–µ –∏–≥–Ω–æ—Ä–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å ok
        return JsonResponse({"ok": True, "ignored": True})

    chat_id = data["chat_id"]
    from_id = data["from_id"]
    text = data["text"]
    reply_msg_id = int(data["reply_to_message_id"])

    # –ù–∞—Ö–æ–¥–∏–º —Ö–æ–¥ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –Ω–∞—à—É –ø–æ–¥—Å–∫–∞–∑–∫—É
    mv = Move.objects.filter(answer_prompt_msg_id=reply_msg_id).select_related("game").first()
    if not mv:
        return JsonResponse({"ok": True, "ignored": True, "reason": "no_move_for_reply"})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    mv.player_answer = text
    mv.player_answer_at = timezone.now()
    mv.answer_prompt_msg_id = None  # –±–æ–ª—å—à–µ –Ω–µ –∂–¥—ë–º
    mv.save(update_fields=["player_answer", "player_answer_at", "answer_prompt_msg_id"])

    # –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –≤ —ç—Ç–æ–π –∂–µ –∏–≥—Ä–µ
    next_mv = Move.objects.filter(
        game=mv.game, on_hold=False, move_number__gt=mv.move_number
    ).order_by("move_number").first()

    bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)

    if next_mv and bot_token:
        # –∑–∞—â–∏—Ç–∏–º—Å—è: –Ω–µ—Ç –ª–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ next_mv (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        has_earlier_pending = Move.objects.filter(
            game=mv.game, on_hold=False, move_number__lt=next_mv.move_number,
            player_answer__isnull=True
        ).exists()
        if not has_earlier_pending:
            # —Å–æ–±–µ—Ä—ë–º move_dict –∫–∞–∫ –≤ EntryManager._serialize_move
            try:
                mgr = GameEntryManager()
                move_dict = mgr._serialize_move(next_mv, player_id=getattr(mv.game, "player_id", None))
            except Exception:
                # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ: id, –Ω–æ–º–µ—Ä–∞, –∫–ª–µ—Ç–∫–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∞
                img_name = get_cell_image_name(int(next_mv.to_cell or 0))
                img_url = image_url_from_board_name(img_name, player_id=getattr(mv.game, "player_id", None),
                                                    game_id=next_mv.game_id)
                move_dict = {
                    "id": next_mv.id,
                    "move_number": next_mv.move_number,
                    "rolled": next_mv.rolled,
                    "from_cell": next_mv.from_cell,
                    "to_cell": next_mv.to_cell,
                    "note": next_mv.note,
                    "event_type": str(getattr(next_mv, "event_type", "")),
                    "applied_rules": (next_mv.state_snapshot or {}).get("applied_rules", []),
                    "on_hold": getattr(next_mv, "on_hold", False),
                    "image_url": img_url,
                }

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É + ForceReply
            Thread(
                target=_send_one_move_and_quiz,
                args=(bot_token, chat_id, move_dict),
                kwargs={"delay": 0.6},
                daemon=True,
            ).start()

            return JsonResponse({"ok": True, "saved": True, "move_id": mv.id, "next_move_id": next_mv.id})

    # –û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫—É ‚Äî –º–æ–∂–Ω–æ –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫
    bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
    if bot_token:
        try:
            import requests
            requests.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫ –µ—â—ë —Ä–∞–∑ üé≤",
                },
                timeout=8,
            )
        except Exception:
            pass

    return JsonResponse({"ok": True, "saved": True, "move_id": mv.id})